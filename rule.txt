Root	->	Seq

Seq		->	Stmt Seq'
Seq'	->	Stmt
		|	$

Stmt	->	var <idt> = Expr
		|	out Expr
		|	Block

Block	->	{ Stmt }

Expr	->	Logic

Logic	->	Comp Logic'
Logic'	->	&& Logic
		|	|| Logic
		|	$

Comp	->	Math Comp'
Comp'	->	== Comp
		|	!= Comp
		|	> Comp
		|	>= Comp
		|	< Comp
		|	<= Comp
		|	$

Math	->	Term Math'
Math'	->	+ Math
		|	- Math
		|	$

Term	->	Unary Term'
Term'	->	* Term
		|	/ Term
		|	$

Unary	->	! Atom
		|	- Atom
		|	Atom

Atom	->	( Expr )
		|	<val>
		|	<idt>